# -*- coding: utf-8 -*-
"""Sistem Rekomendasi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17Ma3vEYrbiqw5KXX9DrbMAyLEXSv5XKG

# Sistem Rekomendasi: [Rekomendasi Buku]
- **Nama:** [Amanda Riyas Utami]
- **Email:** [amandariyas12@gmail.com]
- **ID Dicoding:** [MC223D5X0901]
- **Link Dataset:** https://www.kaggle.com/datasets/thedevastator/books-sales-and-ratings

## Project Overview
Dalam era digital saat ini, jumlah buku yang tersedia di pasaran sangat besar dan terus bertambah. Baik toko buku online maupun platform digital memerlukan sistem yang mampu membantu pembaca menemukan buku yang relevan dengan minat dan preferensi mereka. Tanpa bantuan sistem rekomendasi yang cerdas, pembaca akan kesulitan menemukan buku yang sesuai, dan perusahaan berpotensi kehilangan peluang penjualan. Permasalahan ini menjadi penting untuk dipecahkan karena sistem rekomendasi yang baik tidak hanya meningkatkan pengalaman pengguna tetapi juga berdampak langsung terhadap performa bisnis. Dengan merekomendasikan buku-buku yang relevan berdasarkan kesamaan konten, perusahaan penerbitan atau penjualan buku dapat meningkatkan kepuasan pelanggan sekaligus mendorong penjualan secara lebih efisien. Proyek ini bertujuan untuk membangun sistem rekomendasi buku berbasis content-based filtering dengan memanfaatkan data deskriptif buku seperti nama buku, genre, author, penerbit, dan bahasa buku. Sistem ini akan mengidentifikasi buku-buku yang mirip satu sama lain menggunakan teknik pemrosesan bahasa alami (TF-IDF) dan pengukuran kesamaan (cosine similarity). Dari penelitian terdahulu yang berjudul "Sistem Rekomendasi Buku Menggunakan Metode Content Best Filtering mendapatkan hasil bahwa Sistem rekomendasi buku dengan menggunakan teknik pembobotan TF-IDF dan algoritma cosine similarity dapat memberikan rekomendasi kepada pengguna sesuai dengan kemiripan data buku yang tersedia pada database, pada penelitiannya akurasi sistem rekomendasi buku menggunakan content best filtering memiliki tingkat akurasi precision sebesar 85% (Zayyad, 2021). Sehingga pada penelitian ini akan mencoba membuktikan apakah metode content best filtering bisa atau tidak memberikan akurasi yang akurat mengenai sistem rekomendasi buku.

## Business Understanding
Suatu perusahaan yang bergerak di bidang penerbitan atau penjualan buku tentunya perlu memahami minat dan preferensi pembaca. Memahami tren minat baca sangat penting agar perusahaan dapat memasarkan dan menerbitkan buku yang relevan, sehingga dapat meningkatkan penjualan dan kepuasan pelanggan. Oleh karena itu, diperlukan sistem rekomendasi yang mampu menyarankan buku sesuai dengan minat pembaca berdasarkan konten atau informasi terkait buku-buku yang telah tersedia.

### Problem Statements
- Diperlukan metode untuk mengidentifikasi buku-buku yang memiliki kemiripan topik atau konten dengan buku yang sedang dibaca atau disukai oleh pembaca
- Perusahaan membutuhkan model yang dapat digunakan untuk membangun sistem rekomendasi buku berbasis konten guna meningkatkan relevansi dan kepuasan pelanggan

### Goals
- Mengembangkan metode berbasis pemrosesan teks dan pembelajaran mesin untuk mengidentifikasi buku-buku dengan kemiripan konten atau topik secara otomatis
- Membangun sistem rekomendasi buku berbasis content-based filtering yang mampu memberikan saran buku yang relevan dengan preferensi pembaca, sehingga dapat mendukung strategi bisnis perusahaan dalam meningkatkan penjualan dan kepuasan pelanggan

## Solution statements
- Membuat sistem rekomendasi buku menggunakan content best filtering
- Melakukan hyperparameter tuning pada TF-IDF Vectorizer
- Melakukan evaluasi model dengan average_similarity

## Import Semua Packages/Library yang Digunakan
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib.pyplot as plt
import seaborn as sns
import re

"""## Data Loading"""

book = pd.read_csv('https://raw.githubusercontent.com/AmandaRiyas/Sistem-Rekomendasi/refs/heads/main/Books_Data.csv')
book.head()

print('Jumlah data buku: ', len(book.index.unique()))

"""- Terdapat 1070 data buku

## Data Understanding
"""

book.info()

"""- Data terdiri dari 15 variabel yaitu variabel `index` (int), `Publishing Year` (float), `Book Name` (object), `Author` (object), `language code` (object), `Author_Rating` (object), `Book_average_rating` (float), `Book_ratings_count` (int), `genre` (object), `gross sales` (float), `publisher revenue` (float), `sale price` (float), `sales rank` (int), `Publisher` (object), dan `units sold` (int)  """

book.isna().sum()

"""- Pada variabel `Publishing Year` terdapat 1 data yang kosong
- Pada variabel `Book Name` terdapat 23 data yang kosong
- Pada variabel `language_code` terdapat 53 data yang kosong
"""

print("Jumlah duplikasi: ", book.duplicated().sum())

"""- Tidak ada duplikasi data"""

book.describe()

num_features = book.select_dtypes(include=[np.number])

plt.figure(figsize=(16, 12))
for i, column in enumerate(num_features.columns, 1):
    plt.subplot(3, 3, i)
    sns.histplot(book[column].dropna(), bins=30, kde=True, color='skyblue')
    plt.title(f'Distribusi {column}')
plt.tight_layout()
plt.show()

"""- Pada `index` distribusinya seragam karena index tidak mengandung informasi analitis
- Pada `Publishing Year` distribusi terpusat di sekitar tahun 1900 ke atas dan ada nilai ekstrem yaitu tahun di bawah 0, tahun di bawah 0 ini merupakan bagian dari missing value karena tidak mungkin tahun bernilai negatif
- Pada `Book_average_rating` distribusi datanya hampir normal
- Pada `Book_ratings_count` distribusi data miring ke kanan (right-skewed)
- Pada `gross sales` distribusi data sangat miring ke kanan
- Pada `publisher revenue` distribusi data miring ke kanan
- Pada `sale price` data miring ke kanan (right-skewed)
- Pada `sales rank` distribusi data hampir uniform atau penyebaran data cukup rata
- Pada `units sold` distribusi data sangat miring ke kanan
"""

cat_features = book.select_dtypes(include=['object']).columns.tolist()

n_cols = 2
n_rows = (len(cat_features) + 1) // n_cols
plt.figure(figsize=(16, 5 * n_rows))

# Visualisasi masing-masing kolom kategorikal
for i, column in enumerate(cat_features, 1):
    plt.subplot(n_rows, n_cols, i)
    top_categories = book[column].value_counts().nlargest(10)
    sns.barplot(x=top_categories.values, y=top_categories.index, palette='viridis')
    plt.title(f'Jumlah per kategori: {column}')
    plt.xlabel('Jumlah')
    plt.ylabel(column)

plt.tight_layout()
plt.show()

"""- Pada `Book Name` distribusi rata rata sangat rendah karena tidak ada buku yang mendominasi
- Pada `Author` memiliki distribusi long tail distribution dengan auuthor yang paling dominan yaitu Stephen King
- Pada `language_code` didominasi oleh kode eng, yang artinya bahasa utama buku tersebut adalah bahasa inggris
- Pada `Author_Rating` mayoritas memiliki kategori Intermediate dan yang paling rendah Novice
- Pada `genre` didominasi oleh genre fiction dan yang paling rendah genre children
- Pada `Publisher` penerbit terbanyaknya yaitu Amazon Digital Services, Inc

## Data Preparation
"""

# Menangani data kosong pada Book Name
book = book[book['Book Name'].notna()].copy()

# Cek bahasa paling sering muncul
most_common_lang = book['language_code'].mode()[0]
print("Mode language:", most_common_lang)
book['language_code'] = book['language_code'].fillna(most_common_lang)

"""- Untuk mengatasi data yang kosong pada `Book Name` dilakukan penghapusan karena akan sulit melanjutkan analisis jika nama buku tidak ada
- Untuk menangani data yang kosong pada `language_code` dilakukan pengisian menggunakan modus atau data `language_code` yang sering muncul
"""

book.drop(['Author_Rating', 'Book_average_rating', 'Book_ratings_count',
           'gross sales', 'publisher revenue', 'sale price',
           'sales rank', 'units sold', 'index', 'Publishing Year'], axis=1, inplace=True)

"""- Menghapus variabel `Author_Rating`, `Book_average_rating`, `Book_rating_count`, `gross sales`, `publisher revenue`, `sale price`,`sales rank`, `units sold`,`index`, `Publishing Year` karena tidak diperlukan untuk membuat sistem rekomendasi buku"""

book.isnull().sum()

"""- Sudah tidak ada data yang kosong"""

book.describe()

book.info()

"""- Terdapat 5 variabel bertipe object yaitu `Book Name`, `Author`, `language_code`, `genre`, dan `Publisher`
- Terdapat 1047 data

### TF-IDF Vectorizer
"""

print(book.columns)

"""- Terdapat kolom `Book Name`, `Author`, `language_code`, `genre`, dan `Publisher` dengan tipe data yaitu object"""

book.columns = book.columns.str.strip()

book['content'] = (
    book['genre'].fillna('') + ' ' +
    book['Author'].fillna('') + ' ' +
    book['Publisher'].fillna('') + ' ' +
    book['language_code'].fillna('')  # hapus tanda '+' di sini
)

tf = TfidfVectorizer(stop_words='english')

tfidf_matrix = tf.fit_transform(book['content'])

feature_names = tf.get_feature_names_out()
print(feature_names)

"""- Menghapus spasi di awal dan akhir dari setiap nama kolom
- Menggabungkan genre, Author, Publisher, dan language_code menjadi content untuk mempermudah membuat model sistem rekomendasi
- Mentransformasi content menjadi matriks TF-IDF
- Membuat array dari fitur index integer ke fitur nama
- Output yang diperoleh terdapat karakter yang aneh yang sebaiknya dihapus
"""

book['content'] = book['content'].apply(lambda x: re.sub('[^a-zA-Z ]', ' ', x).lower())

"""- Membersihkan karakter aneh di kolom content"""

tf = TfidfVectorizer(stop_words='english')

tfidf_matrix = tf.fit_transform(book['content'])

feature_names = tf.get_feature_names_out()
print(feature_names)

"""- Melakukan inisialisasi TF-IDF ulang
- Mentransformasi ulang kolom konten setelah dilakukan pembersihan karakter aneh
- Dari output terlihat bahwa sudah tidak ada karakter yang aneh
"""

tfidf_matrix = tf.fit_transform(book['content'])

print(tfidf_matrix.shape)

"""- Melakukan fit dan kemudian mentransformasikannya ke dalam bentuk matriks, ukuran matriks yang terbentuk yaitu terdiri dari 1047 baris dengan 1437 kolom"""

tfidf_matrix.todense()

"""- Melakukan perubahan vektor TF-IDF ke dalam bentuk matriks dengan fungsi todense()"""

df_tfidf = pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=book['Book Name']
)
df_tfidf.sample(10, axis=0).sample(4, axis=1)

"""- Membuat dataframe untuk melihat tf-idf matrix
- Pada kolom diisi dengan kata-kata unik dari kolom `content` (fitur TF-IDF) dan baris diisi dengan book name
- Hasil dari output diperoleh semuanya berisi 0.0. Nilai 0.0 dianggap wajar karena kata-kata yang dipilih tidak ada dalam konten buku yang ditampilkan

## Model Development dengan Content Based Filtering

### Cosine Similarity
"""

cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

"""Matriks cosine similarity yang dihasilkan menunjukkan tingkat kemiripan antar buku berdasarkan isi konten mereka (representasi TF-IDF). Nilai similarity berkisar dari 0 hingga 1, dimana:
- 1 berarti dokumen itu identik dengan dirinya sendiri
- Nilai mendekati 1 menunjukkan kemiripan konten yang tinggi antar buku
- Nilai rendah menunjukkan perbedaan konten yang signifikan.
"""

cosine_sim_df = pd.DataFrame(cosine_sim, index=book['Book Name'], columns=book['Book Name'])
print('Shape:', cosine_sim_df.shape)

cosine_sim_df.sample(10, axis=0).sample(5, axis=1)

"""- Dibuat dataframe dari matriks cosine similarity, output di atas menunjukkan similarity matrix pada beberapa buku secara acak, semakin nilainya mendekati 1 maka tingkat kemiripan buku semakin tinggi

## Mendapatkan Rekomendasi
"""

def book_recommendations(nama_buku, similarity_data=cosine_sim_df, items=book[['Book Name', 'genre', 'Author', 'Publisher', 'language_code']], k=5):
    """
    Rekomendasi Buku berdasarkan kemiripan konten (gabungan genre, author, publisher, bahasa, rating).

    Parameter:
    ---
    nama_buku : str
        Judul buku (harus sesuai dengan indeks dalam similarity_data)
    similarity_data : pd.DataFrame
        Matriks similarity (cosine similarity), dengan nama buku sebagai index dan kolom
    items : pd.DataFrame
        Data berisi kolom buku yang ingin ditampilkan pada hasil rekomendasi
    k : int
        Jumlah buku yang direkomendasikan

    Returns:
    ---
    pd.DataFrame
        Data rekomendasi buku paling mirip berdasarkan kemiripan konten
    """

    if nama_buku not in similarity_data.index:
        raise ValueError(f"Buku '{nama_buku}' tidak ditemukan dalam data similarity.")

    sim_scores = similarity_data.loc[nama_buku]

    sim_scores = sim_scores.drop(nama_buku)

    top_k_idx = sim_scores.nlargest(k).index

    rekomendasi = pd.DataFrame(top_k_idx, columns=['Book Name']).merge(items, on='Book Name')
    return rekomendasi

"""- Membuat model sistem rekomendasi"""

book[book['Book Name'].eq('A Little Princess')]

"""- Mencoba mencari buku yang berjudul A Little Princess"""

book_recommendations('A Little Princess')

"""- Dari pencarian buku yang berjudul "A Little Princess" diperoleh rekomendasi buku lainnya yaitu "Loving Frank", "Skeleton Crew", "Lover Enshrined, part one", "The Complete Anne of Green Gables Boxed Set", dan "Anne of the Island"

## Evaluasi Model
"""

def precision_at_k_feature(nama_buku, similarity_data, items, k=5, fitur='genre'):
    rekomendasi = book_recommendations(nama_buku, similarity_data, items, k)

    if nama_buku not in items['Book Name'].values:
        raise ValueError(f"Buku '{nama_buku}' tidak ditemukan di data items.")

    nilai_asli = items[items['Book Name'] == nama_buku][fitur].values[0]
    relevan = rekomendasi[fitur] == nilai_asli
    return relevan.sum() / k

"""- Membuat fungsi untuk evaluasi model"""

for fitur in ['genre', 'Author', 'Publisher', 'language_code']:
    p = precision_at_k_feature('A Little Princess', cosine_sim_df, book, k=5, fitur=fitur)
    print(f"Precision@5 untuk fitur '{fitur}': {p:.2f}")

"""- Dari hasil evaluasi model diperoleh akurasi genre 1, artinya model sangat baik dalam mencari buku dengan genre yang sama
- Dari hasil evaluasi Author diperoleh nilai akurasinya 0 karena tidak ada Author yang sama dengan buku A Little Princess pada buku yang direkomendasikan, hal ini bukan berarti model tidak baik, namun model lebih mementingkan kesamaan tema buku dari pada penulis
- Dari hasil evaluasi Publisher diperoleh nilai akurasinya 0,8 yang artinya sudah hampir semua buku yang direkomendasikan memiliki Publisher yang sama
- Dari hasil evaluasi language_code diperoleh nilai akurasinya 0,8, yang artinya sudah hampir semua buku yang direkomendasikan memiliki kode bahasa buku yang sama

"""